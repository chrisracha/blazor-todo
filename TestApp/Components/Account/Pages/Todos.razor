@page "/todos"
@using Microsoft.AspNetCore.Identity
@using TestApp.Services
@using TestApp.Data
@using Microsoft.AspNetCore.Authorization
@inject UserManager<ApplicationUser> UserManager
@inject IToDoService ToDoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>To-Do List</PageTitle>

<div class="container py-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Your To-Do List</h3>
            <button @onclick="QuickRefresh" class="btn btn-sm btn-light" disabled="@isBusy">
                <i class="bi bi-arrow-clockwise @(isBusy ? "spinner" : "")"></i>
            </button>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <div class="input-group">
                    <input @bind="newTitle" @bind:event="oninput" @onkeyup="HandleKeyPress"
                           class="form-control" placeholder="New task..." id="newTaskInput" name="newTaskInput" />
                    <button @onclick="QuickAdd" class="btn btn-primary" id="addButton" name="addButton"
                            disabled="@isBusy">
                        @if (isBusy && operation == Operation.Add)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Adding...</span>
                        }
                        else
                        {
                            <i class="bi bi-plus-lg"></i>
                            <span>Add</span>
                        }
                    </button>
                </div>
            </div>

            @if (errorMessage != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="ClearError"></button>
                </div>
            }

            @if (isBusy && operation == Operation.Load && (todos == null || !todos.Any()))
            {
                <div class="text-center p-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading your tasks...</p>
                </div>
            }
            else if (todos == null || !todos.Any())
            {
                <div class="alert alert-info">
                    Your to-do list is empty. Add a task to get started!
                </div>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var todo in todos)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input"
                                       checked="@todo.isDone"
                                       @onchange="() => ToggleTodo(todo)"
                                       id="@($"todo-{todo.Id}")" name="@($"todo-{todo.Id}")"
                                       disabled="@(isBusy && operation == Operation.Update)" />
                                <label class="form-check-label @(todo.isDone ? "text-decoration-line-through text-muted" : "")"
                                       for="@($"todo-{todo.Id}")">
                                    @todo.Title
                                </label>
                            </div>
                            <button @onclick="() => DeleteTodo(todo.Id)"
                                    class="btn btn-sm btn-outline-danger"
                                    disabled="@(isBusy && operation == Operation.Delete)">
                                @if (isBusy && operation == Operation.Delete && currentId == todo.Id)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <i class="bi bi-trash"></i>
                                }
                            </button>
                        </li>
                    }
                </ul>

                <div class="mt-3 text-end">
                    <span class="text-muted me-2">@todos.Count(t => !t.isDone) items remaining</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private enum Operation { None, Load, Add, Update, Delete }

    private List<ToDoItem> todos = new();
    private string newTitle = string.Empty;
    private string? userId;
    private string? errorMessage;
    private bool isBusy = false;
    private Operation operation = Operation.None;
    private int currentId = 0;
    private bool isDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            userId = UserManager.GetUserId(user);

            ToDoService.ItemsChanged += OnItemsChanged;
            await LoadTodos();
        }
        catch (Exception ex)
        {
            errorMessage = $"Initialization error: {ex.Message}";
        }
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private async Task QuickRefresh()
    {
        if (!isBusy)
        {
            await LoadTodos();
        }
    }

    private async Task LoadTodos()
    {
        if (isBusy || userId == null || isDisposed) return;

        operation = Operation.Load;
        isBusy = true;
        StateHasChanged();

        try
        {
            todos = await ToDoService.GetForUserAsync(userId);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tasks: {ex.Message}";
            todos ??= new List<ToDoItem>(); 
        }
        finally
        {
            isBusy = false;
            operation = Operation.None;
            if (!isDisposed) StateHasChanged();
        }
    }

    private void OnItemsChanged()
    {
        if (isDisposed) return;

        InvokeAsync(async () =>
        {
            if (!isBusy && !isDisposed)
            {
                await LoadTodos();
            }
        });
    }

    private async Task QuickAdd()
    {
        if (!isBusy)
        {
            await AddTodo();
        }
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTitle) || userId == null || isBusy || isDisposed)
            return;

        operation = Operation.Add;
        isBusy = true;
        StateHasChanged();

        try
        {
            var item = new ToDoItem { Title = newTitle.Trim(), isDone = false, UserId = userId };
            await ToDoService.AddAsync(item);
            newTitle = "";

            todos = await ToDoService.GetForUserAsync(userId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding task: {ex.Message}";
        }
        finally
        {
            isBusy = false;
            operation = Operation.None;
            if (!isDisposed) StateHasChanged();
        }
    }

    private async Task ToggleTodo(ToDoItem item)
    {
        if (isBusy || isDisposed) return;

        operation = Operation.Update;
        currentId = item.Id;
        isBusy = true;
        StateHasChanged();

        try
        {
            item.isDone = !item.isDone;
            await ToDoService.UpdateAsync(item);

        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating task: {ex.Message}";
            item.isDone = !item.isDone;

            if (userId != null)
                todos = await ToDoService.GetForUserAsync(userId);
        }
        finally
        {
            isBusy = false;
            operation = Operation.None;
            currentId = 0;
            if (!isDisposed) StateHasChanged();
        }
    }

    private async Task DeleteTodo(int id)
    {
        if (isBusy || userId == null || isDisposed) return;

        operation = Operation.Delete;
        currentId = id;
        isBusy = true;
        StateHasChanged();

        try
        {
            await ToDoService.DeleteAsync(id, userId);

            todos.RemoveAll(t => t.Id == id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting task: {ex.Message}";

            todos = await ToDoService.GetForUserAsync(userId);
        }
        finally
        {
            isBusy = false;
            operation = Operation.None;
            currentId = 0;
            if (!isDisposed) StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isBusy && !isDisposed)
        {
            await AddTodo();
        }
    }

    public void Dispose()
    {
        isDisposed = true;
        ToDoService.ItemsChanged -= OnItemsChanged;
    }
}